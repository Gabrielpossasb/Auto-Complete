{"version":3,"sources":["components/Barra/styles.ts","components/Barra/SearchBar.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Container","styled","div","_templateObject","Object","taggedTemplateLiteral","SearchBar","props","_useState","useState","_useState2","slicedToArray","inputSearch","setInputSearch","api","data","map","val","title","_useState3","_useState4","apiData","setApiData","suggestions","filter","option","toLowerCase","includes","toLocaleLowerCase","_useState5","_useState6","newItem","setNewItem","_useState7","_useState8","showSuggestions","setShowSuggestions","autocompleteRef","useRef","_useState9","_useState10","modalIsOpen","setIsOpen","useEffect","handleClick","event","current","contains","target","document","addEventListener","removeEventListener","react_default","a","createElement","className","onClick","ref","index_esm","color","size","placeholder","value","onChange","onFocus","ti_index_esm","key","handleClickAutoComplete","lib_default","overlayClassName","isOpen","onRequestClose","type","concat","toConsumableArray","GlobalStyle","createGlobalStyle","global_templateObject","App","Searchs","id","Modal","setAppElement","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.bab1f368.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const Container = styled.div`\r\n   display: flex;\r\n   align-items: flex-start;\r\n   padding: 2rem;\r\n   gap: 2rem;\r\n   justify-content: center;\r\n   flex-direction: row;\r\n\r\n   .searchInput {\r\n      display: flex;\r\n      align-items: center;\r\n\r\n      width: 90%;\r\n      max-width: 600px;\r\n      height: 65px;\r\n      margin-bottom: 5px solid #4e4e4e;\r\n      \r\n      border-radius: 1rem;\r\n      padding: 0 2rem;\r\n\r\n      gap: 10px;\r\n\r\n      background: #13181f;\r\n\r\n      input {\r\n         border: 0;\r\n         outline: 0;\r\n         background: #1a2129;\r\n         padding: 10px 20px;\r\n         border-radius: 2rem;\r\n         font-size: 22px;\r\n         color: #a455b9;\r\n         font-weight: 400;\r\n         width: 100%;\r\n\r\n         &::placeholder {\r\n            color: #58425e         \r\n         }\r\n      }\r\n\r\n      .del {\r\n         border-radius: 2rem;\r\n         background: #1a2129;\r\n         margin-right: -20px;\r\n         padding: 3px 1rem;\r\n         transition: background 0.4s;\r\n         &:hover{\r\n            background: #2f3946;\r\n\r\n         }\r\n      }   \r\n   }\r\n   .searchArea {\r\n      display: flex;\r\n      align-items: center;\r\n      flex-direction: column;\r\n   }\r\n\r\n      .btnNewItem{\r\n         background: #198b8b;\r\n         border: 0;\r\n         color: #fff;\r\n         cursor: pointer;\r\n         font-size: 2.5rem;\r\n         padding: 0 11px;\r\n         border-radius: 2rem;\r\n         transition: background 0.4s;\r\n         margin-top: 0.6rem;\r\n         \r\n         &:hover{\r\n            background: #0f5a5a;\r\n         }\r\n      }\r\n\r\n   .dataResult {\r\n      background: #1a2129;\r\n      border-bottom-left-radius: 1rem;\r\n      border-bottom-right-radius: 1rem;\r\n      max-height: 300px;\r\n      overflow: hidden;\r\n      color: #a058b4;\r\n      margin-bottom: 4px solid #2d2d2d;\r\n      \r\n      overflow-y: auto;\r\n      width: 95%;\r\n      font-size: 1.25rem;\r\n      max-width: 632px;\r\n   }\r\n\r\n   .dataResult::-webkit-scrollbar {\r\n      display: none;\r\n   }\r\n\r\n   .dataItem {\r\n      display: flex;\r\n      align-items: center;\r\n      padding: 12px 18px;\r\n      gap: 16px;\r\n      cursor: pointer;\r\n      \r\n      &:hover {\r\n         background: #1f2831;\r\n      }\r\n   }\r\n   \r\n   \r\n   \r\n`;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { FcSearch, FcCheckmark } from 'react-icons/fc';\r\nimport { Container } from './styles';\r\nimport { TiBackspace } from \"react-icons/ti\";\r\nimport Modal from 'react-modal';\r\n\r\n\r\ninterface propsApi {\r\n   title: string;\r\n   id: number;\r\n   data: any;\r\n}\r\n\r\nexport function SearchBar(props:propsApi) {\r\n/*\r\npara fazer o search atraves de uma api em forma de OBJETO {} adicionar o .title depois do\r\n\"option.toLowerCase()\" => \"option.title.toLowerCase()\". Se der certo o filter fara o map no data e percorrera \r\ntodos os \"titles\" e os colocando em letra minuscula\r\n*/\r\n   const [inputSearch, setInputSearch] = useState('');\r\n   const api = props.data.map((val: {title:string}) => {return val.title})\r\n   const [apiData, setApiData] = useState(api)\r\n   const suggestions = apiData.filter( (option:string) => option.toLowerCase().includes(inputSearch.toLocaleLowerCase()));\r\n   const [newItem, setNewItem] = useState('');\r\n\r\n   const [showSuggestions, setShowSuggestions] = useState(false);\r\n   const autocompleteRef = useRef<HTMLDivElement | null>(null);\r\n\r\n   const [modalIsOpen, setIsOpen] = useState(false);\r\n\r\n   useEffect(() => {\r\n      const handleClick = (event: { target: any; }) => {\r\n         if (autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\r\n            setShowSuggestions(false)\r\n         }\r\n      };\r\n      document.addEventListener(\"click\", handleClick);\r\n      \r\n      return () => {\r\n         document.removeEventListener(\"click\", handleClick)\r\n      }\r\n   }, [])\r\n\r\n  \r\n\r\n   function handleFilter(event: React.ChangeEvent<HTMLInputElement>) {\r\n      setInputSearch(event.target.value)\r\n   }\r\n\r\n   function handleClickAutoComplete(value : string)  {\r\n      setInputSearch(value)\r\n      setShowSuggestions(false)\r\n   }\r\n\r\n   function NewItemList() {\r\n\r\n      { (newItem !== '') && (\r\n         setApiData([...apiData,newItem])\r\n      )}\r\n      \r\n      { newItem !== '' && (\r\n         setIsOpen(false)\r\n      )}\r\n      \r\n      setNewItem('')\r\n   }\r\n\r\n   return (\r\n      <Container>\r\n        \r\n         <button\r\n            className='btnNewItem'\r\n             onClick={() => setIsOpen(true)}\r\n         >\r\n            +   \r\n         </button>\r\n\r\n         <div className='searchArea'>\r\n            <div className='searchInput' ref={autocompleteRef}>\r\n               \r\n               <FcSearch className='icon' color='#777676' size={48}/>\r\n               <input \r\n                  placeholder='Pesquisar...' \r\n                  value={inputSearch} \r\n                  onChange={(val) => handleFilter(val)}\r\n                  onFocus={() => setShowSuggestions(true)}\r\n               />\r\n               <TiBackspace className='del' color='#394555' size={38} onClick={() => setInputSearch('')}/> \r\n               \r\n            </div>\r\n         \r\n            {\r\n            showSuggestions && (\r\n               <div className='dataResult'>\r\n               {\r\n                  suggestions.map( (value: string ) =>{\r\n                     return(\r\n                        <div key={value} className='dataItem' onClick={() => handleClickAutoComplete(value)}>\r\n                           <p>{value}</p>\r\n                        </div>\r\n                     )\r\n                  })\r\n               }\r\n               </div>\r\n            )\r\n            }\r\n          </div>\r\n         \r\n         <Modal \r\n            className='react-modal-content'\r\n            overlayClassName=\"react-modal-overlay\"\r\n            isOpen={modalIsOpen}\r\n            onRequestClose={() => setIsOpen(false)}\r\n         >\r\n            <input \r\n               type=\"text\"\r\n               placeholder='Ex: Banana' \r\n               className='newItem'\r\n               value={newItem}\r\n               onChange={(val) => setNewItem(val.target.value)}\r\n            />\r\n            <FcCheckmark size={28} onClick={() => NewItemList()} className='iconCheck'/>\r\n         </Modal>\r\n      </Container>\r\n   );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyle = createGlobalStyle`\n\tbody {\n\t\tmargin: 0;\n\t\tfont-family: \"Roboto\", sans-serif;\n\t\t-webkit-font-smoothing: antialiased;\n\t\tbackground: rgb(30,40,50);\n\t}\n\n\t.react-modal-content{\n\t\tbackground: #13181f;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\tflex-direction: column;\n\t\tpadding: 1rem 3rem;\n\t\tposition: relative;\n\t\t\n\t\tborder-radius: 0.24rem;\n\n\t\t.iconCheck {\n\t\t\tborder-radius: 2rem;\n\t\t\tmargin-top: 2rem;\n\t\t\tpadding: 0.5rem;\n\n\t\t\t&:hover{\n\t\t\t\tbackground: #1a2129;\n\t\t\t}\n\t\t}\n\n\t\tinput {\n\t\t\tbackground: #13181f;\n\t\t\tpadding: 1rem 1rem;\n\t\t\twidth: 100%;\n\t\t\tfont-size: large;\n\t\t\tborder: 0;\n\t\t\tborder-bottom: 1px solid #58425e;\n\t\t\tcolor: #a058b4;\n\n\t\t\t&::placeholder {\n\t\t\t\tcolor: #58425e;\n\t\t\t}\t\n\t\t\t&:focus{\n         \toutline: 0;\n      \t}\n\t\t}\n\n\t}\n\t.react-modal-overlay{\n\t\tbackground: rgba(0,0,0,0.3);\n\t\tborder: none;\n\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tbottom: 0;\n\t\tright: 0;\n\t\tleft: 0;\n\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n`","import { SearchBar } from './components/Barra/SearchBar';\nimport React from 'react';\n\nimport Searchs from './db.json'\nimport { GlobalStyle } from './styles/global';\nimport Modal from 'react-modal';\n\nModal.setAppElement('#root');\n\n\nexport function App() {\n  return (\n    <div>\n      <SearchBar data={Searchs} title={''} id={0} />\n      <GlobalStyle />\n    </div>\n  );\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport {App} from './App';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n"],"sourceRoot":""}